diff --git a/subscriptions_rules.rules.inc b/subscriptions_rules.rules.inc
index a31d33c..a427071 100644
--- a/subscriptions_rules.rules.inc
+++ b/subscriptions_rules.rules.inc
@@ -53,6 +53,22 @@ function subscriptions_rules_rules_action_info() {
     'access callback' => 'subscriptions_rules_add_user_content_access',
   );

+  $term_base = array(
+    'type' => 'subscriptions',
+    'parameter' => array(
+      'term' => array('type' => 'taxonomy_term', 'label' => t('Taxonomy term')),
+      'user' => array('type' => 'user', 'label' => t('User')),
+      'send_interval' => array(
+        'type' => 'textfield',
+        'label' => t('Send Interval'),
+        'optional' => TRUE,
+        'description' => t('Leave blank to use user\'s setting. This will be in calculated in seconds.'),
+      ),
+    ),
+    'group' => t('Subscriptions'),
+    'access callback' => 'subscriptions_rules_add_user_content_access',
+  );
+
   // Action subsribe a user to a content
   $items['subscriptions_rules_add_user_content'] = array(
     'label' => t('Subscribe user to node'),
@@ -77,6 +93,18 @@ function subscriptions_rules_rules_action_info() {
     'base' => 'subscriptions_rules_remove_user_content_type_callback',
   ) + $type_base;

+  // Action subscribe a user to a taxonomy term
+  $items['subscriptions_rules_add_user_term'] = array(
+    'label' => t('Subscribe user to taxonomy term'),
+    'base' => 'subscriptions_rules_add_user_term_callback',
+  ) + $term_base;
+
+  // Action unsubscribe a user to a taxonomy
+  $items['subscriptions_rules_remove_user_term'] = array(
+    'label' => t('Unsubscribe user from taxonomy term'),
+    'base' => 'subscriptions_rules_remove_user_term_callback',
+  ) + $term_base;
+
   $items['subscriptions_rules_stop_sending'] = array(
     'label' => t('Stop email sending'),
     'base' => 'subscriptions_rules_stop_sending_callback',
@@ -356,6 +384,81 @@ function subscriptions_rules_remove_user_content_type_callback($node_types, $acc
   return $ret;
 }

+/**
+ * Rule subscriptions_add_user_term callback
+ */
+function subscriptions_rules_add_user_term_callback($term, $user, $type = 'node', $send_interval = "") {
+  // Get existing
+  $sid = subscriptions_get_subscription($user->uid, 'node', 'tid', $term->tid);
+  $args = array (
+    0 => 'node',
+    1 => 'tid',
+    2 => $term->tid,
+    3 => -1,
+    4 => $user->uid,
+    5 => is_numeric($send_interval) ? $send_interval : _subscriptions_get_setting('send_interval', $user),
+    6 => TRUE,
+    7 => TRUE,
+  );
+
+  if ($sid) {
+    // Add more value to existed subscription_content row
+    $update = db_update('subscriptions')
+    ->condition('module', $args[0])
+    ->condition('field', $args[1])
+    ->condition('value', $args[2])
+    ->condition('author_uid', $args[3])
+    ->condition('recipient_uid', $args[4]);
+
+    if ($args[6]) {
+      $update->fields(array(
+        'send_updates' => 1,
+      ));
+    }
+
+    if ($args[7]) {
+      $update->fields(array(
+        'send_comments' => 1,
+      ));
+    }
+
+    $ret = $update->execute();
+  }
+  else {
+    $ret = call_user_func_array('subscriptions_write_subscription', $args);
+  }
+
+  return $ret;
+}
+
+/**
+ * Rule subscriptions_remove_user_term callback
+ */
+function subscriptions_rules_remove_user_term_callback($term, $user, $type = 'node') {
+  $args = array (
+    0 => 'node',
+    1 => 'tid',
+    2 => $term->tid,
+    3 => -1,
+    4 => $user->uid,
+    5 => _subscriptions_get_setting('send_interval', $user),
+    6 => TRUE,
+    7 => TRUE,
+  );
+
+  // Delete single rows
+  $delete = db_delete('subscriptions')
+    ->condition('module', $args[0])
+    ->condition('field', $args[1])
+    ->condition('value', $args[2])
+    ->condition('author_uid', $args[3])
+    ->condition('recipient_uid', $args[4]);
+
+  $ret = $delete->execute();
+
+  return $ret;
+}
+
 function subscriptions_rules_stop_sending_callback_access() {
   // TODO: access callback
   return TRUE;
